#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
var https = require('https');  // Import https module

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Declare the server variable.
 */
var server;

/**
 * Create HTTP server to redirect HTTP traffic to HTTPS (only in production).
 */
if (process.env.NODE_ENV === 'production') {
  // Create HTTP server to redirect HTTP traffic to HTTPS
  http.createServer((req, res) => {
    res.redirect(301, 'https://' + req.headers.host + req.url); // Redirect HTTP to HTTPS
  }).listen(80, () => {
    console.log("HTTP server running on port 80 (redirects to HTTPS)");
  });

  // Create HTTPS server for production
  server = https.createServer(app);
  server.listen(443, () => {
    console.log("HTTPS server running on port 443");
  });
} else {
  // In development mode, just use the default port (3000) and run normally
  server = http.createServer(app);
  server.listen(port, () => {
    console.log('Server started on port ' + port);
  });
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
