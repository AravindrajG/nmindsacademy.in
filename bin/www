#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('backend:server');
const http = require('http');
const https = require('https');
const fs = require('fs'); // Only needed if using SSL locally

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Check if running in production (on Render) or local development
if (process.env.NODE_ENV === 'production') {
  // HTTP server (redirect to HTTPS in production)
  http.createServer((req, res) => {
    res.redirect(301, 'https://' + req.headers.host + req.url); // Redirect to HTTPS
  }).listen(80, () => {
    console.log('HTTP server running on port 80');
  });

  // HTTPS server (only in production)
  https.createServer({
    // SSL certificates for production (you may add certificates in the future)
    // key: fs.readFileSync('path/to/private.key'),
    // cert: fs.readFileSync('path/to/certificate.crt')
  }, app).listen(443, () => {
    console.log('HTTPS server running on port 443');
  });

} else {
  // Local development setup: Run normally, no HTTP to HTTPS redirection
  app.listen(port, () => {
    console.log(`Server running on port ${port}`);
  });
}

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    return val; // Named pipe
  }
  if (port >= 0) {
    return port; // Port number
  }
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
